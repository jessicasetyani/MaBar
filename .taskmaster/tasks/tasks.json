{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository and Environment Configuration",
        "description": "Initialize the project repository with React.js frontend, Node.js/Express.js backend, and MongoDB setup. Configure environment variables management using dotenv and ensure .env is gitignored.",
        "details": "Create a monorepo or separate repos for frontend and backend. Initialize React 18+ with Vite or Create React App for SPA. Setup Node.js 18+ with Express 4.x for REST API. Use Mongoose 7.x for MongoDB ODM. Configure dotenv for environment variables and add .env to .gitignore. Setup ESLint and Prettier for code quality and SonarQube integration for security checks. Use Passport.js 0.6.x for OAuth integration later.",
        "testStrategy": "Verify repository initialization by running frontend and backend servers locally. Confirm environment variables load correctly and .env is excluded from git commits. Run linting and SonarQube scans to ensure no security issues.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Monorepo Structure with Frontend and Backend Workspaces",
            "description": "Create the root project directory and set up a monorepo using Yarn Workspaces (or npm workspaces) to manage 'frontend' and 'backend' sub-projects.",
            "dependencies": [],
            "details": "Create a root directory for the project. Initialize a `package.json` at the root using `npm init -y` or `yarn init -y`. Configure the `workspaces` array in the root `package.json` to include `['packages/*']`. Create `packages/frontend` and `packages/backend` directories within the root.",
            "status": "done",
            "testStrategy": "Verify the root `package.json` contains the `workspaces` configuration and that `packages/frontend` and `packages/backend` directories exist."
          },
          {
            "id": 2,
            "title": "Setup Backend Node.js/Express.js Project",
            "description": "Initialize the `backend` workspace with Node.js, Express.js, and Mongoose. Create a basic server entry point.",
            "dependencies": [
              "1.1"
            ],
            "details": "Navigate to `packages/backend`. Run `npm init -y` or `yarn init -y` to create a `package.json`. Install `express@4.x` and `mongoose@7.x` using `npm install express mongoose` or `yarn add express mongoose`. Create a `src/server.js` file with a minimal Express application that listens on a specified port (e.g., 5000).",
            "status": "done",
            "testStrategy": "Navigate to `packages/backend` and run `node src/server.js` (or a similar script). Confirm the server starts without errors and listens on the configured port. Verify `node_modules` and `package.json` are correctly set up."
          },
          {
            "id": 3,
            "title": "Setup Frontend React.js Project with Vite",
            "description": "Initialize the `frontend` workspace with React 18+ using Vite.",
            "dependencies": [
              "1.1"
            ],
            "details": "Navigate to `packages/frontend`. Use `npm create vite@latest . -- --template react` (or `react-ts` if using TypeScript) to scaffold a new React project. Clean up the default Vite boilerplate to leave a minimal `App.jsx` component. Ensure `package.json` scripts for `dev`, `build`, and `preview` are correctly configured.",
            "status": "done",
            "testStrategy": "Navigate to `packages/frontend` and run `npm run dev` or `yarn dev`. Confirm the React development server starts and the basic React app is accessible in the browser (e.g., http://localhost:5173)."
          },
          {
            "id": 4,
            "title": "Configure Environment Variable Management with Dotenv",
            "description": "Install and configure `dotenv` for the backend. Create `.env` files for both frontend and backend, and ensure they are properly ignored by Git.",
            "dependencies": [
              "1.2",
              "1.3"
            ],
            "details": "In `packages/backend`, install `dotenv` (`npm install dotenv` or `yarn add dotenv`). In `packages/backend/src/server.js` (or your main entry point), add `require('dotenv').config();` at the very top. Create `packages/backend/.env` for backend-specific variables and `packages/frontend/.env` for client-side public variables (prefixed with `VITE_` for Vite). Add `/.env` to the root `.gitignore` file to prevent environment variables from being committed.",
            "status": "done",
            "testStrategy": "Add a test variable (e.g., `TEST_VAR=hello`) to `packages/backend/.env`. In `src/server.js`, `console.log(process.env.TEST_VAR)`. Run the backend and verify the variable is logged. Attempt to `git add .` and confirm `.env` files are not staged."
          },
          {
            "id": 5,
            "title": "Implement MongoDB Connection using Mongoose in Backend",
            "description": "Establish a connection to MongoDB from the backend using Mongoose.",
            "dependencies": [
              "1.2",
              "1.4"
            ],
            "details": "In `packages/backend`, create a `src/config/db.js` file. Implement an asynchronous function `connectDB` that uses `mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })`. Call this `connectDB` function from `packages/backend/src/server.js` before starting the Express server. Add `MONGO_URI=mongodb://localhost:27017/your_database_name` to `packages/backend/.env`.",
            "status": "done",
            "testStrategy": "Ensure a MongoDB instance is running locally or accessible. Run the backend server. Verify console logs indicate a successful MongoDB connection or catch and log connection errors. Check MongoDB logs for incoming connections."
          },
          {
            "id": 6,
            "title": "Integrate ESLint and Prettier for Code Quality",
            "description": "Set up ESLint and Prettier in both frontend and backend workspaces to enforce consistent code style and identify potential issues.",
            "dependencies": [
              "1.2",
              "1.3"
            ],
            "details": "For `packages/backend`: Install `eslint`, `prettier`, `eslint-config-prettier`, `eslint-plugin-prettier` as dev dependencies. Create `.eslintrc.js` and `.prettierrc.js` with Node.js-specific rules. For `packages/frontend`: Install `eslint`, `prettier`, `eslint-config-prettier`, `eslint-plugin-prettier`, `eslint-plugin-react`, `eslint-plugin-react-hooks` as dev dependencies. Create `.eslintrc.js` and `.prettierrc.js` with React-specific configurations. Add `lint` and `format` scripts to each `package.json` (e.g., `\"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx\", \"format\": \"prettier --write .\"`).",
            "status": "done",
            "testStrategy": "Introduce a deliberate linting error (e.g., unused variable) and a formatting error (e.g., incorrect indentation) in both frontend and backend code. Run the `lint` and `format` scripts in each workspace and verify that errors are reported and formatting is corrected."
          },
          {
            "id": 7,
            "title": "Prepare Project for SonarQube Integration",
            "description": "Configure the project structure and add necessary files to enable future SonarQube code analysis for security and quality checks.",
            "dependencies": [
              "1.1"
            ],
            "details": "Create a `sonar-project.properties` file at the root of the monorepo. Define properties such as `sonar.projectKey`, `sonar.sources=packages/backend/src,packages/frontend/src`, `sonar.tests=packages/backend/test,packages/frontend/test`, `sonar.exclusions=**/node_modules/**,**/*.test.js`, and `sonar.javascript.lcov.reportPaths` (if coverage is planned). This file will guide the SonarQube scanner. Add a placeholder script in the root `package.json` like `\"sonar-scan\": \"sonar-scanner -Dsonar.projectKey=your_project_key -Dsonar.host.url=http://localhost:9000 -Dsonar.token=your_token\"` (replace with actual values).",
            "status": "done",
            "testStrategy": "Verify the `sonar-project.properties` file exists at the root and contains the necessary configuration. Ensure the `sonar-scan` script is added to the root `package.json`. (Actual SonarQube scan will be tested in CI/CD)."
          },
          {
            "id": 8,
            "title": "Install and Initialize Passport.js in Backend",
            "description": "Install Passport.js and `express-session` in the backend and perform basic initialization to prepare for future authentication strategies.",
            "dependencies": [
              "1.2",
              "1.4"
            ],
            "details": "In `packages/backend`, install `passport@0.6.x` and `express-session` (`npm install passport express-session` or `yarn add passport express-session`). In `packages/backend/src/server.js`, configure `express-session` middleware with a secret from `.env` (e.g., `app.use(session({ secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: false }));`). Then, initialize Passport using `app.use(passport.initialize());` and `app.use(passport.session());`. Add `SESSION_SECRET=your_strong_secret` to `packages/backend/.env`.",
            "status": "done",
            "testStrategy": "Run the backend server. Verify that Passport.js and `express-session` middleware are initialized without errors. Check server logs for any related warnings or errors during startup."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Admin Panel Foundation and Venue Verification Queue",
        "description": "Develop secure admin login and a venue verification queue to approve or reject new venue submissions, forming the foundation for venue onboarding.",
        "details": "Use React with React Router for admin SPA. Implement backend REST endpoints for admin authentication and venue verification management. Use Passport.js with local strategy or OAuth for admin login. Store admin credentials securely in MongoDB with hashed passwords (bcrypt 5.x). Create venue verification queue UI with approve/reject actions. Ensure role-based access control (RBAC) middleware on backend routes.",
        "testStrategy": "Test admin login with valid and invalid credentials. Verify venue submissions appear in the queue. Test approve/reject actions update venue status in DB. Confirm unauthorized users cannot access admin routes.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Build Venue Onboarding Flow for Venue Owners",
        "description": "Create the onboarding process for venue owners to submit court details for verification, enabling venue data collection for the platform.",
        "details": "Implement frontend forms for venue owners to input venue details, location (use Google Maps API for address autocomplete), operating hours, and upload images. Backend endpoints to receive and store venue data with verification status set to pending. Validate inputs on frontend and backend. Use MongoDB schema for Venue with fields as per PRD.",
        "testStrategy": "Validate form input constraints and error handling. Submit venue data and verify it appears in admin verification queue. Test image upload and storage. Confirm data integrity in MongoDB.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement User Authentication and Profile Management",
        "description": "Develop user registration (email and OAuth SSO with Google and Facebook), login, role selection (Player or Venue Owner), and editable player profile with matchmaking preferences.",
        "details": "Use Passport.js with Google and Facebook OAuth 2.0 strategies and local email/password strategy. Store user data in MongoDB with roles and nested profile object including skill level, play style, and availability. Implement frontend registration/login forms and profile management pages with React Hook Form and validation. Secure API endpoints with JWT or session-based auth.",
        "testStrategy": "Test registration and login flows for email and OAuth. Verify role selection persists. Edit and save profile preferences and confirm data updates in DB. Test authentication middleware protects routes.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Develop Venue Dashboard with Calendar View for Schedule Management",
        "description": "Create a dashboard for venue owners to manage court availability, view bookings, and block off times using a calendar interface.",
        "details": "Use React with a calendar library like FullCalendar 6.x or React Big Calendar for UI. Backend endpoints to fetch and update venue availability and bookings. Implement blocking/unblocking time slots. Ensure real-time updates with polling or WebSocket (optional for MVP). Store schedule data in MongoDB linked to Venue and GameSession models.",
        "testStrategy": "Test calendar displays correct availability and bookings. Verify blocking/unblocking updates backend and UI. Confirm only venue owners can access and modify their schedules.",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Game Session Management for Players",
        "description": "Allow players to create, view, and join game sessions with logic for auto-cancellation if minimum player count is not met.",
        "details": "Design GameSession schema with venue, time, required players, joined players with status, and session status. Backend endpoints for session CRUD and joining logic. Implement auto-cancellation job using Node.js cron or agenda.js to cancel sessions not meeting minimum players before start time. Frontend UI for session creation, listing, and joining with status updates.",
        "testStrategy": "Create sessions and verify data stored correctly. Join sessions and check player status updates. Test auto-cancellation triggers correctly. Validate UI reflects session states accurately.",
        "priority": "high",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Generate Unique QR Codes for Each Booking",
        "description": "Implement QR code generation for game sessions accessible from the venue dashboard to facilitate check-ins.",
        "details": "Use a library like 'qrcode' 1.5.x or 'qr-code-styling' for generating QR codes in backend or frontend. Each QR code encodes a unique session and player identifier. Store QR code data or generate on-demand. Integrate QR code display in venue dashboard and player session views.",
        "testStrategy": "Generate QR codes for sessions and verify scannability with standard QR scanners. Confirm QR codes encode correct session/player info. Test UI integration and accessibility.",
        "priority": "medium",
        "dependencies": [
          5,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement QR Code Check-in Functionality",
        "description": "Develop the ability for players to scan QR codes to prove attendance at game sessions, enabling attendance verification.",
        "details": "Use a React QR code scanner library like 'react-qr-reader' 3.x for frontend scanning. Backend API to validate scanned QR code data, update player check-in status in GameSession. Secure endpoints to prevent spoofing. Provide UI feedback on successful or failed check-in.",
        "testStrategy": "Test scanning QR codes with various devices. Verify backend updates check-in status correctly. Test error handling for invalid or duplicate scans.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Build Reputation and Trust System",
        "description": "Add functionality for players to report no-shows and rate venues after completed and checked-in games to foster community trust.",
        "details": "Extend GameSession and User schemas to store ratings and reports. Backend endpoints to submit ratings and no-show reports. Frontend UI for rating venues and reporting no-shows post-session. Implement aggregation logic for venue ratings. Ensure only checked-in players can rate/report.",
        "testStrategy": "Submit ratings and reports and verify persistence. Confirm only eligible users can submit. Test aggregation and display of venue ratings. Validate UI flows and error handling.",
        "priority": "medium",
        "dependencies": [
          6,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Integrate AI Chat Interface with Google Gemini API",
        "description": "Develop frontend chat interface and backend API integration with Google Gemini API for conversational matchmaking in English and Bahasa Indonesia.",
        "details": "Frontend chat UI with React using a chat component library or custom implementation supporting multilingual input. Backend API to send user queries to Google Gemini API with proper prompt engineering and caching for common queries to reduce costs. Handle API responses and display matchmaking recommendations. Implement fallback deterministic filters for initial MVP. Use Google Gemini API latest version with secure API key management.",
        "testStrategy": "Test chat interface usability and responsiveness. Validate API calls and responses. Confirm recommendations are relevant and multilingual support works. Test caching and error handling.",
        "priority": "medium",
        "dependencies": [
          4,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-27T09:33:35.425Z",
      "updated": "2025-08-27T09:48:24.038Z",
      "description": "Tasks for master context"
    }
  }
}