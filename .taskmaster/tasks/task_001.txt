# Task ID: 1
# Title: Setup Project Repository and Environment Configuration
# Status: done
# Dependencies: None
# Priority: high
# Description: Initialize the project repository with React.js frontend, Node.js/Express.js backend, and MongoDB setup. Configure environment variables management using dotenv and ensure .env is gitignored.
# Details:
Create a monorepo or separate repos for frontend and backend. Initialize React 18+ with Vite or Create React App for SPA. Setup Node.js 18+ with Express 4.x for REST API. Use Mongoose 7.x for MongoDB ODM. Configure dotenv for environment variables and add .env to .gitignore. Setup ESLint and Prettier for code quality and SonarQube integration for security checks. Use Passport.js 0.6.x for OAuth integration later.

# Test Strategy:
Verify repository initialization by running frontend and backend servers locally. Confirm environment variables load correctly and .env is excluded from git commits. Run linting and SonarQube scans to ensure no security issues.

# Subtasks:
## 1. Initialize Monorepo Structure with Frontend and Backend Workspaces [done]
### Dependencies: None
### Description: Create the root project directory and set up a monorepo using Yarn Workspaces (or npm workspaces) to manage 'frontend' and 'backend' sub-projects.
### Details:
Create a root directory for the project. Initialize a `package.json` at the root using `npm init -y` or `yarn init -y`. Configure the `workspaces` array in the root `package.json` to include `['packages/*']`. Create `packages/frontend` and `packages/backend` directories within the root.

## 2. Setup Backend Node.js/Express.js Project [done]
### Dependencies: 1.1
### Description: Initialize the `backend` workspace with Node.js, Express.js, and Mongoose. Create a basic server entry point.
### Details:
Navigate to `packages/backend`. Run `npm init -y` or `yarn init -y` to create a `package.json`. Install `express@4.x` and `mongoose@7.x` using `npm install express mongoose` or `yarn add express mongoose`. Create a `src/server.js` file with a minimal Express application that listens on a specified port (e.g., 5000).

## 3. Setup Frontend React.js Project with Vite [done]
### Dependencies: 1.1
### Description: Initialize the `frontend` workspace with React 18+ using Vite.
### Details:
Navigate to `packages/frontend`. Use `npm create vite@latest . -- --template react` (or `react-ts` if using TypeScript) to scaffold a new React project. Clean up the default Vite boilerplate to leave a minimal `App.jsx` component. Ensure `package.json` scripts for `dev`, `build`, and `preview` are correctly configured.

## 4. Configure Environment Variable Management with Dotenv [done]
### Dependencies: 1.2, 1.3
### Description: Install and configure `dotenv` for the backend. Create `.env` files for both frontend and backend, and ensure they are properly ignored by Git.
### Details:
In `packages/backend`, install `dotenv` (`npm install dotenv` or `yarn add dotenv`). In `packages/backend/src/server.js` (or your main entry point), add `require('dotenv').config();` at the very top. Create `packages/backend/.env` for backend-specific variables and `packages/frontend/.env` for client-side public variables (prefixed with `VITE_` for Vite). Add `/.env` to the root `.gitignore` file to prevent environment variables from being committed.

## 5. Implement MongoDB Connection using Mongoose in Backend [done]
### Dependencies: 1.2, 1.4
### Description: Establish a connection to MongoDB from the backend using Mongoose.
### Details:
In `packages/backend`, create a `src/config/db.js` file. Implement an asynchronous function `connectDB` that uses `mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })`. Call this `connectDB` function from `packages/backend/src/server.js` before starting the Express server. Add `MONGO_URI=mongodb://localhost:27017/your_database_name` to `packages/backend/.env`.

## 6. Integrate ESLint and Prettier for Code Quality [done]
### Dependencies: 1.2, 1.3
### Description: Set up ESLint and Prettier in both frontend and backend workspaces to enforce consistent code style and identify potential issues.
### Details:
For `packages/backend`: Install `eslint`, `prettier`, `eslint-config-prettier`, `eslint-plugin-prettier` as dev dependencies. Create `.eslintrc.js` and `.prettierrc.js` with Node.js-specific rules. For `packages/frontend`: Install `eslint`, `prettier`, `eslint-config-prettier`, `eslint-plugin-prettier`, `eslint-plugin-react`, `eslint-plugin-react-hooks` as dev dependencies. Create `.eslintrc.js` and `.prettierrc.js` with React-specific configurations. Add `lint` and `format` scripts to each `package.json` (e.g., `"lint": "eslint . --ext .js,.jsx,.ts,.tsx", "format": "prettier --write ."`).

## 7. Prepare Project for SonarQube Integration [done]
### Dependencies: 1.1
### Description: Configure the project structure and add necessary files to enable future SonarQube code analysis for security and quality checks.
### Details:
Create a `sonar-project.properties` file at the root of the monorepo. Define properties such as `sonar.projectKey`, `sonar.sources=packages/backend/src,packages/frontend/src`, `sonar.tests=packages/backend/test,packages/frontend/test`, `sonar.exclusions=**/node_modules/**,**/*.test.js`, and `sonar.javascript.lcov.reportPaths` (if coverage is planned). This file will guide the SonarQube scanner. Add a placeholder script in the root `package.json` like `"sonar-scan": "sonar-scanner -Dsonar.projectKey=your_project_key -Dsonar.host.url=http://localhost:9000 -Dsonar.token=your_token"` (replace with actual values).

## 8. Install and Initialize Passport.js in Backend [done]
### Dependencies: 1.2, 1.4
### Description: Install Passport.js and `express-session` in the backend and perform basic initialization to prepare for future authentication strategies.
### Details:
In `packages/backend`, install `passport@0.6.x` and `express-session` (`npm install passport express-session` or `yarn add passport express-session`). In `packages/backend/src/server.js`, configure `express-session` middleware with a secret from `.env` (e.g., `app.use(session({ secret: process.env.SESSION_SECRET, resave: false, saveUninitialized: false }));`). Then, initialize Passport using `app.use(passport.initialize());` and `app.use(passport.session());`. Add `SESSION_SECRET=your_strong_secret` to `packages/backend/.env`.

